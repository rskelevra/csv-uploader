apiVersion: kops.k8s.io/v1alpha2
kind: Cluster
metadata:
  name: ounass.k8s.local  # Cluster name
spec:
  kubernetesVersion: "1.26.0"  # Kubernetes version
  cloudProvider: aws  # Cloud provider
  region: ap-south-1  # Specify your region here
  topology:
    masters: public  # Master nodes in public subnets
    nodes: public  # Worker nodes in public subnets
  networkCIDR: 10.0.0.0/16  # Network CIDR block
  networking:
    amazonvpc: {}  # Networking option, Amazon VPC CNI plugin
  sshAccess:
    - 203.0.113.0/24  # Replace with your trusted IP range
  authorization:
    rbac: {}
  etcdClusters:
    - name: main
      etcdMembers:
        - name: a
          instanceGroup: master-ap-south-1a # Instance group for the master node

# Instance Group for the master node
---
apiVersion: kops.k8s.io/v1alpha2
kind: InstanceGroup
metadata:
  name: master-ap-south-1a
  labels:
    kops.k8s.io/cluster: ounass.k8s.local
spec:
  cloudLabels:
    k8s.io/cluster-autoscaler/enabled: "1"
    k8s.io/cluster-autoscaler/ounass.k8s.local: "1"
    kops.k8s.io/instance-selector: "1"
  role: Master
  image: 099720109477/ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20200716
  machineType: t2.micro
  minSize: 1
  maxSize: 1
  subnets:
    - ap-south-1a

# Instance Group 1: MixedInstancesPolicy
---
apiVersion: kops.k8s.io/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: ounass.k8s.local
  name: mixed
spec:
  cloudLabels:
    k8s.io/cluster-autoscaler/enabled: "1"
    k8s.io/cluster-autoscaler/ounass.k8s.local: "1"
    kops.k8s.io/instance-selector: "1"
  image: 099720109477/ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20200528
  machineType: c3.xlarge
  maxSize: 15
  minSize: 2
  mixedInstancesPolicy:
    instances:
    - c3.xlarge
    - c4.xlarge
    - c5.xlarge
    - c5a.xlarge
    onDemandBaseCapacity: 1  # At least one on-demand instance
    onDemandPercentageAboveBaseCapacity: 50  # 50% of instances are on-demand
    spotAllocationStrategy: capacity-optimized
  nodeLabels:
    kops.k8s.io/instancegroup: mixed
  role: Node
  subnets:
  - ap-south-1a
  - ap-south-1b

# Instance Group 2: Lifecycle (on-demand)
---
apiVersion: kops.k8s.io/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: ounass.k8s.local
  name: on-demand-group
spec:
  cloudLabels:
    k8s.io/cluster-autoscaler/enabled: "1"
    k8s.io/cluster-autoscaler/ounass.k8s.local: "1"
  image: 099720109477/ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20200716
  machineType: m4.large
  maxSize: 5
  minSize: 2
  nodeLabels:
    kops.k8s.io/instancegroup: on-demand-group
  role: Node
  subnets:
  - ap-south-1a
  - ap-south-1b

# Instance Group 3: Lifecycle (Spot)
apiVersion: kops.k8s.io/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: ounass.k8s.local
  name: spot-group
spec:
  cloudLabels:
    k8s.io/cluster-autoscaler/enabled: "1"
    k8s.io/cluster-autoscaler/ounass.k8s.local: "1"
  image: 099720109477/ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20200716
  machineType: m4.large
  maxSize: 10
  minSize: 2
  nodeLabels:
    kops.k8s.io/instancegroup: spot-group
  role: Node
  subnets:
  - ap-south-1a
  - ap-south-1b
  instanceLifecycle: spot

# Cluster Autoscaler Deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cluster-autoscaler
  namespace: kube-system
  labels:
    app: cluster-autoscaler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cluster-autoscaler
  template:
    metadata:
      labels:
        app: cluster-autoscaler
    spec:
      containers:
      - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.26.0
        name: cluster-autoscaler
        resources:
          requests:
            cpu: 100m
            memory: 300Mi
          limits:
            cpu: 100m
            memory: 300Mi
        command:
          - ./cluster-autoscaler
          - --cloud-provider=aws
          - --nodes=3:15:mixed-group-1
          - --nodes=2:10:mixed-group-2
          - --cluster-name=ounass.k8s.local
          - --balance-similar-node-groups
          - --skip-nodes-with-system-pods=false
          - --expander=least-waste
          - --skip-nodes-with-local-storage=false
        volumeMounts:
        - name: ssl-certs
          mountPath: /etc/ssl/certs/ca-certificates.crt
          readOnly: true
      volumes:
      - name: ssl-certs
        hostPath:
          path: /etc/ssl/certs/ca-certificates.crt
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Equal"
        effect: "NoSchedule"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/role
                operator: In
                values:
                - master