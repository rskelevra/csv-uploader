### Prerequisites
- **Kops Installed**: Ensure Kops is installed on your local machine.
- **AWS CLI Configured**: The AWS CLI should be configured with credentials that have the necessary permissions to manage EC2, VPC, and related AWS services.
- **S3 Bucket for State Store**: An S3 bucket is required to store the Kops state (specified via the `KOPS_STATE_STORE` environment variable).

## Usage Instructions
sudo apt update -y
Create an IAM User: Set up an IAM user with the necessary permissions. It's recommended to grant Administrator access for full control. Make sure the user has programmatic access enabled.

Generate Access Keys: Obtain the access key and secret key for the IAM user you just created.

Log in to AWS: From your Kops EC2 instance, log in to AWS using:
aws configure
Provide AWS Credentials: The aws configure command will prompt you for the access key, secret key, region, and output format. Enter the details as required.

Create an S3 Bucket: Set up an S3 bucket to store all the configuration and state files related to your Kubernetes cluster.

Set Up DNS in Route53: Create a hosted zone in AWS Route53 for your domain. If your domain is registered elsewhere (e.g., Hostinger), you'll need to link it by adding the NS records from Route53 to your DNS provider.

Link NS Records: Add the Name Server (NS) records from your Route53 hosted zone to the DNS server where your domain is registered (e.g., Hostinger).

Install Kubectl: Install the Kubernetes command-line tool kubectl by following the instructions at Install Kubectl on Linux.
Generate SSH Keys: Create SSH keys by executing the following command:
ssh-keygen -f .ssh/id_rsa

Create the Kubernetes Cluster: Run the command below to initiate cluster creation. Make sure to modify it with your specific details:
kops create cluster --name=<your-cluster-name> --state=s3://<your-s3-bucket> --zones=<your-zone> --node-count=1 --node-size=t2.medium --control-plane-size=t2.medium --dns-zone=<your-dns-zone>

Review and Apply Configuration: The command above will generate a preview of the resources that Kops plans to create. If the preview looks good, finalize the creation by running:
kops update cluster --name <your-cluster-name> --yes --admin --state=s3://<your-s3-bucket>

# Step 4: Validate the cluster
kops validate cluster --name ounass.k8s.local

# Step 5: Create InstanceGroup and ClusterAutoscaler config
kops create -f ClusterAutoscaler.yaml

kops create -f CustomResourceDefinition.yaml  #must specify a cluster when creating additional objects
kops create -f InstanceGroup.yaml

kops update cluster --name ounass.k8s.local --yes --admin
kops validate cluster --name ounass.k8s.local

# Step 6: Apply the Configuration
kops update cluster --name ounass.k8s.local --yes --admin

# Step 4: Validate the cluster
kops validate cluster --name ounass.k8s.local

## Configuration Files

1. Instance Group for the Master Node
Name: master-ap-south-1a
Benefit:
This Instance Group is responsible for managing the control plane of the Kubernetes cluster. It ensures that a master node runs in the ap-south-1a availability zone with a t2.micro instance type.
Focuses on stability and cost-effectiveness for control plane operations.

2. Instance Group 1: Mixed Instances Policy
Name: mixed
Benefit: The mixed Instance Group offers a well-balanced approach to managing workloads in a Kubernetes cluster. It combines the cost-saving benefits of Spot instances with the reliability of On-Demand instances, all while ensuring high availability and flexibility through the use of multiple instance types and subnets. This makes it an ideal configuration for production environments that require both efficiency and resilience.

3. Instance Group 2: On-Demand Lifecycle
Name: on-demand-group
Benefit: This Instance Group is configured to use On-Demand instances, ensuring consistent availability and performance. It is suited for workloads that require guaranteed uptime without the risk of interruption.

4. Instance Group 3: Spot Lifecycle
Name: spot-group
Benefit: This Instance Group is configured to use Spot instances, offering cost savings by utilizing spare AWS capacity. It is ideal for fault-tolerant workloads that can handle interruptions.

## Benefits

### Cost Optimization
Instance groups are configured to utilize spot instances, which are significantly cheaper than on-demand instances. By balancing spot and on-demand instances, these configurations provide substantial cost savings without compromising the stability of critical workloads.

### Enhanced Reliability
The inclusion of on-demand instances in the groups ensures that essential workloads continue to operate even if spot instances are interrupted. The `capacity-optimized` strategy further enhances reliability by selecting spot instances with the highest availability.

### Flexible and Scalable Infrastructure
The mixed instances policy allows for flexible scaling of resources based on workload demands. The Cluster Autoscaler can adjust the number of instances in each group dynamically, optimizing the cluster's performance and cost-efficiency.